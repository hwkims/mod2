var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");


function doUpdateSession()
{
	if( NgbMember.IsLogin() 	// 웹세션이 존재하는 경우만, Auth Server 에 UpdateSession
	&& location.href.toLowerCase().indexOf( "/localhost/" ) == -1  
	&&  location.href.toLowerCase().indexOf("?url=_comp/login_notlogin") == -1
	&&  location.href.toLowerCase().indexOf("?url=login/logout") == -1
	&&  location.href.toLowerCase().indexOf("?url=login/loginproc") == -1)
	{
		AuthSystem.UpdateSession( onUpdateResponse );
	}
}

var objUpdateInterval = null;
function onUpdateResponse( resultObject, responseXML )
{
	if( resultObject.ErrorCode == undefined )	// Auth Server 에 Session 이 존재하지 않으므로, 로그아웃 처리
	{
		NgbLogin.Logout();
	}
	else if( resultObject.ErrorCode == CommonError.NoError )		// OK
	{
		window.clearInterval( objUpdateInterval );
		objUpdateInterval = setInterval( "doUpdateSession()", resultObject.UpdateInterval * 1000 );	// ExpireLimit(Second) 이후, UpdateSession
	}
	else if( resultObject.ErrorCode == AuthSystemError.Disconnected )
	{
		alert( "다른 컴퓨터에서 연결을 요청하여 로그아웃 됩니다." );

		NgbLogin.Logout();
	}
	else if( resultObject.ErrorCode == AuthSystemError.InvalidUserIP ) {
		alert( "잘못된 요청으로 로그아웃 됩니다. 잠시 후 다시 로그인을 시도해 주세요." );
		NgbLogin.Logout();
	}
	else
	{
		// Error 상황으로 Debeg 를 위한 정보 출력
/*
		Debug.Print( 'onUpdateResponse(' + resultObject._cs + ')<br>\r\n'
				+ 'resultObject.ErrorCode = ' + resultObject.ErrorCode + '<br>\r\n'	// 결과(0 이 아니면 에러, 에러 코드 참조)
				+ 'resultObject.ErrorMessage = ' + resultObject.ErrorMessage + '<br>\r\n'
				+ 'resultObject.NewPassport = ' + resultObject.NewPassport + '<br>\r\n'
				+ 'resultObject.UnreadNoteCount = ' + resultObject.UnreadNoteCount + '<br>\r\n'
				+ 'resultObject.StatusFlag = ' + resultObject.StatusFlag + '<br>\r\n'
				+ 'resultObject.UpdateInterval = ' + resultObject.UpdateInterval + '<br>\r\n' );
*/
		alert( "넥슨 웹사이트에서 로그아웃 되었습니다. " );

		NgbLogin.Logout();
	}
}

setTimeout( "doUpdateSession()", 1 );	// ExpireLimit(Second) 이후, UpdateSession




}
/*
     FILE ARCHIVED ON 21:52:27 Oct 31, 2014 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 00:31:18 Sep 10, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 0.44
  exclusion.robots: 0.018
  exclusion.robots.policy: 0.009
  esindex: 0.01
  cdx.remote: 11.165
  LoadShardBlock: 35.548 (3)
  PetaboxLoader3.datanode: 78.376 (5)
  load_resource: 297.267 (2)
  PetaboxLoader3.resolve: 83.668 (2)
*/